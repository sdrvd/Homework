package HomeWork1;

public class Prioritets {
    public static void main(String[] args) {
        int a = 5;
        int b = 2;
        int c = 8;
        int d = 7;
        int q = 68;
        int k = 20;
        int g = 22;
        int j = 6;
        int z = 12;
        int p = 3;
        boolean oo = true;

        int d21 = a + b / c; // Операторы делят 2 на 8, а затем прибавляют результат к числу 5, в нашем случае 2 на 8 это 0. Ответ = 5
        System.out.println("d21 = " + d21);
        int d22 = (a + b) / c; // Приоритет стоит у выражения в скобках, 5+2 = 7, 7 / 8 = 0
        System.out.println("d22 = " + d22);
        int d23 = (a + b++) / c; // Оператор инкремента увеличивает значение b на единицу после использования её в выражении, поэтому результат не меняется и аналогичен предыдущему
        System.out.println("d23 = " + d23);
        int d24 = (a + b++) / --c; // Оператор декремента стоит в позиции перед c, поэтому его применение происходит перед использованием перемменной в выражении
        System.out.println("d24 = " + d24);
        int d25 = (a * b >> b++) / --c; // К выражению применяется побитовая операция, сдвигающая результат а * b по количеству позиций
        System.out.println("d25 = " + d25);
        int d26 = (a + d > k ? q : g * b >> b++) / --c; // К неравенству применяется тернарный оператор
        System.out.println("d26 = " + d26);
        //int d27 = (a + d > k ? q >= q : g * b >> b++); //
        //int d28 = j - b > p && z * z <= 119; //
        //boolean d29 = true && false;



        /* 2.1 5 + 2 / 8
	2.2 (5 + 2) / 8
	2.3 (5 + 2++) / 8
	2.4 (5 + 2++) / --8
	2.5 (5 * 2 >> 2++) / --8
	2.6 (5 + 7 > 20 ? 68 : 22 * 2 >> 2++) / --8
	2.7 (5 + 7 > 20 ? 68 >= 68 : 22 * 2 >> 2++) / --8
	2.8 6 - 2 > 3 && 12 * 12 <= 119
	2.9 true && false */
    }
}
